<!DOCTYPE html>
<html lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
		<title>three.js 372-vertex distance graph</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">

  </head>
  <style>
    #canvas {
    pointer-events:none;
}
    </style>
	<body>

		<div id="container"><div style="position: fixed; top: 0px; left: 0px; cursor: pointer; opacity: 0.9; z-index: 10000;"><canvas width="80" height="48" style="width: 80px; height: 48px; display: block;"></canvas><canvas width="80" height="48" style="width: 80px; height: 48px; display: none;"></canvas></div></div>
		<div id="info">
			<a href="https://threejs.org/" target="_blank" rel="noopener">three.js</a><br>Displaying an embedding of a distance graph<br>
			Based on the code by <a href="https://twitter.com/fernandojsg">fernandojsg</a>
		</div>
		<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
		<script type="module">

			import * as THREE from 'https://unpkg.com/three@0.127.0/build/three.module.js';
			import { OrbitControls } from 'https://unpkg.com/three@0.127.0/examples/jsm/controls/OrbitControls.js';

			import Stats from 'https://unpkg.com/three@0.127.0/examples/jsm/libs/stats.module.js';
			import { GUI } from 'https://unpkg.com/three@0.127.0/examples/jsm/libs/dat.gui.module.js';

			let group;
			let container, stats;
			const particlesData = [];
			let camera, scene, renderer;
			let positions, colors;
			let particles;
			let pointCloud;
			let particlePositions;
			let linesMesh;
			let subgraph;
			let subgraph1;
			let show_subgr = 0;
			let show_subgr1 = 0;

			let cur = 0;
			let dcur = 1;
			let n_series;



			const r = 2;
			const rHalf = r / 2;

			const effectController = {
				showDots: true,
				showLines: true,
				minDistance: 150,
				limitConnections: false,
				maxConnections: 20,
				particleCount: 500
			};

			let coords;

			let maxParticleCount;
			let particleCount;
			let edgelist;
			let timesteps;
			
			fetch("372.dg").then((response) => {  return response.json();
			}).then((data) => {

		        coords = data["coords"];
			edgelist = data["edges"];
			
			if ("subgraph" in data) {
			    subgraph = data["subgraph"];
			show_subgr = 1;
			alert(subgraph);
		
			}

				if ("subgraph1" in data) {
			    subgraph1 = data["subgraph1"];
			show_subgr1 = 1;
			alert(subgraph1);
		
			}

		

			maxParticleCount = coords.length / 3;
			particleCount = maxParticleCount;



			
			$(document).mousedown(function (e) {
		
        e.preventDefault();
        mouse.x =  ( e.clientX / renderer.domElement.width  ) * 2 - 1;
        mouse.y = -( e.clientY / renderer.domElement.height ) * 2 + 1;
        raycaster.setFromCamera( mouse, camera );
        var intersects = raycaster.intersectObject( pointCloud, true );
        if (intersects.length > 0) {
            //console.log( 'intersects', intersects );
            // Points.js::raycast() doesn't seem to sort this correctly atm,
            // but how many points are found depends on the threshold set
            // on the raycaster as well
            intersects = intersects.sort( function( a, b ) {
                return a.distanceToRay - b.distanceToRay;
            });
            var particle = intersects[0];
            console.log( 'got a click on particle',
               particle.object.userData.particles[ particle.index ].name );

            // Change the color of this particular particle
            particle.object.geometry.colors[ particle.index ].setHex( Math.random() * 0xFFFFFF ); 
            particles.colorsNeedUpdate = true;
        }
    });

			

			init();
			animate();
			});

		;

			function initGUI() {

				const gui = new GUI();

				gui.add( effectController, "showDots" ).onChange( function ( value ) {

					pointCloud.visible = value;

				} );
				gui.add( effectController, "showLines" ).onChange( function ( value ) {

					linesMesh.visible = value;

				} );
				gui.add( effectController, "minDistance", 0, 300 );
				gui.add( effectController, "limitConnections" );
				gui.add( effectController, "maxConnections", 0, 30, 1 );
				gui.add( effectController, "particleCount", 0, maxParticleCount, 1 ).onChange( function ( value ) {

					particleCount = parseInt( value );
					particles.setDrawRange( 0, particleCount );

				} );

			}

			function init() {

				//initGUI();

				container = document.getElementById( 'container' );

				camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 4000 );
				camera.position.z = 5;

				const controls = new OrbitControls( camera, container );
				controls.minDistance = 2;
				controls.maxDistance = 30;

				scene = new THREE.Scene();
	


				group = new THREE.Group();
				scene.add( group );

				//const helper = new THREE.BoxHelper( new THREE.Mesh( new THREE.BoxGeometry( r, r, r ) ) );
				//helper.material.color.setHex( 0x101010 );
				//helper.material.blending = THREE.AdditiveBlending;
				//helper.material.transparent = true;
				//group.add( helper );

		
				const segments = edgelist.length*2;

				positions = new Float32Array( segments * 3 );
				colors = new Float32Array( segments * 3 );

				const pMaterial = new THREE.PointsMaterial( {
					color: 0xFFFFFF,
					size: 10,
					blending: THREE.AdditiveBlending,
					transparent: true,
					sizeAttenuation: false
			} );




				particles = new THREE.BufferGeometry();
				particlePositions = new Float32Array( maxParticleCount * 3 );


				for ( let i = 0; i < maxParticleCount; i ++ ) {

					particlePositions[ i * 3 ] = coords[i*3];
					particlePositions[ i * 3 + 1 ] = coords[i*3+1];
					particlePositions[ i * 3 + 2 ] = coords[i*3+2];

					// add it to the geometry
					particlesData.push( {
						velocity: new THREE.Vector3( - 1 + Math.random() * 2, - 1 + Math.random() * 2, - 1 + Math.random() * 2 ),
						numConnections: 0
					} );

				}

				particles.setDrawRange( 0, particleCount );
				particles.setAttribute( 'position', new THREE.BufferAttribute( particlePositions, 3 ).setUsage( THREE.DynamicDrawUsage ) );

				// create the particle system
				pointCloud = new THREE.Points( particles, pMaterial );
						     
						     container.addEventListener('click',function(ev) {
						      e.preventDefault();
        mouse.x =  ( e.clientX / renderer.domElement.width  ) * 2 - 1;
						     mouse.y = -( e.clientY / renderer.domElement.height ) * 2 + 1;
						      alert(mouse.x);
        
						     raycaster.setFromCamera( mouse, camera );
						    
	var intersects = raycaster.intersectObject( pointCloud, true );
						     
        if (intersects.length > 0) {
            //console.log( 'intersects', intersects );
            // Points.js::raycast() doesn't seem to sort this correctly atm,
            // but how many points are found depends on the threshold set
            // on the raycaster as well
            intersects = intersects.sort( function( a, b ) {
                return a.distanceToRay - b.distanceToRay;
            });
            var particle = intersects[0];
            console.log( 'got a click on particle',
		    particle.object.userData.particles[ particle.index ].name );
		    alert(particle.object.userData.particles[ particle.index ].name);

            // Change the color of this particular particle
            particle.object.geometry.colors[ particle.index ].setHex( Math.random() * 0xFFFFFF ); 
            particles.colorsNeedUpdate = true;
        }

						     });
						     
				group.add( pointCloud );

				const geometry = new THREE.BufferGeometry();

				geometry.setAttribute( 'position', new THREE.BufferAttribute( positions, 3 ).setUsage( THREE.DynamicDrawUsage ) );
				geometry.setAttribute( 'color', new THREE.BufferAttribute( colors, 3 ).setUsage( THREE.DynamicDrawUsage ) );

				geometry.computeBoundingSphere();

				geometry.setDrawRange( 0, 0 );

				const material = new THREE.LineBasicMaterial( {
					vertexColors: true,
					blending: THREE.AdditiveBlending,
					transparent: true
				} );

				linesMesh = new THREE.LineSegments( geometry, material );
				group.add( linesMesh );

				//

				renderer = new THREE.WebGLRenderer( { antialias: true } );
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( window.innerWidth, window.innerHeight );
				renderer.outputEncoding = THREE.sRGBEncoding;

				container.appendChild( renderer.domElement );

				//

				stats = new Stats();
				container.appendChild( stats.dom );

				window.addEventListener( 'resize', onWindowResize );

			}

			function onWindowResize() {

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );

			}

			function animate() {

				let vertexpos = 0;
				let colorpos = 0;
						     let numConnected = 0;
						     let alpha1; let alpha2; let alpha3;
						    						   



				for (let k = 0; k<edgelist.length; k++) {
							let i = edgelist[k][0];
							let j = edgelist[k][1];

							//particleData.numConnections ++;
							//particleDataB.numConnections ++;

								   alpha1 = 0.05;  alpha2 = 0.05;  alpha3 = 0.05;
								   
						     if (show_subgr) {
							
								   if (subgraph.includes(i) && subgraph.includes(j)) {
								    alpha1 = 1.0;  alpha2 = 0.0;  alpha3 = 0.0;
								   
								   }
						     }

							if (show_subgr1) {
							
								   if (subgraph1.includes(i) && subgraph1.includes(j)) {
								    alpha1 = 0.0;  alpha2 = 1.0;  alpha3 = 0.0;
								   
								   }
								   }

							 if (show_subgr && show_subgr1 ) {
							
								   if ((subgraph.includes(i) && subgraph1.includes(j)) || (subgraph.includes(i) && subgraph1.includes(j))) {
								    alpha1 = 0.0;  alpha2 = 1.0;  alpha3 = 1.0;
								   
								   }
							}

							positions[ vertexpos ++ ] = particlePositions[ i * 3 ];
							positions[ vertexpos ++ ] = particlePositions[ i * 3 + 1 ];
							positions[ vertexpos ++ ] = particlePositions[ i * 3 + 2 ];

							positions[ vertexpos ++ ] = particlePositions[ j * 3 ];
							positions[ vertexpos ++ ] = particlePositions[ j * 3 + 1 ];
							positions[ vertexpos ++ ] = particlePositions[ j * 3 + 2 ];

							colors[ colorpos ++ ] = alpha1;
							colors[ colorpos ++ ] = alpha2;
							colors[ colorpos ++ ] = alpha3;

							colors[ colorpos ++ ] = alpha1;
							colors[ colorpos ++ ] = alpha2;
							colors[ colorpos ++ ] = alpha3;

							numConnected ++;

					//	}

					

				}


				linesMesh.geometry.setDrawRange( 0, numConnected * 2 );
				linesMesh.geometry.attributes.position.needsUpdate = true;
				linesMesh.geometry.attributes.color.needsUpdate = true;

				pointCloud.geometry.attributes.position.needsUpdate = true;

				requestAnimationFrame( animate );
		   
				stats.update();
				render();

			}

			function render() {

				const time = Date.now() * 0.001;

				group.rotation.y = time * 0.03;
				renderer.render( scene, camera );

			}

		</script>
	
</body></html>
